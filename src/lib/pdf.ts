import { jsPDF } from 'jspdf';
import { AuditResult, FormData } from '@/types';
import autoTable from 'jspdf-autotable';

export const generatePDF = (auditResult: AuditResult, userData: FormData): Blob => {
  // Create a new PDF document
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });
  
  // Define colors
  const primaryColor = '#21145f'; // RGB 33, 20, 95
  const accentColor = '#7950f2'; // RGB 121, 80, 242
  
  // Add title
  doc.setFontSize(24);
  doc.setTextColor(primaryColor);
  doc.text('Website Brand Audit Report', 105, 20, { align: 'center' });
  
  // Add subtitle with website URL
  doc.setFontSize(14);
  doc.setTextColor(100);
  doc.text(`For: ${userData.website}`, 105, 30, { align: 'center' });
  
  // Add date
  const today = new Date();
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text(`Generated on: ${today.toLocaleDateString()}`, 105, 38, { align: 'center' });
  
  // Add horizontal line
  doc.setDrawColor(200);
  doc.line(20, 42, 190, 42);
  
  // Add client information section
  doc.setFontSize(12);
  doc.setTextColor(primaryColor);
  doc.text('Client Information', 20, 50);
  
  doc.setFontSize(10);
  doc.setTextColor(80);
  doc.text(`Name: ${userData.name}`, 20, 58);
  doc.text(`Email: ${userData.email}`, 20, 64);
  
  if (userData.industry) {
    doc.text(`Industry: ${userData.industry}`, 20, 70);
  }
  
  if (userData.businessGoal) {
    doc.text(`Business Goal: ${userData.businessGoal}`, 20, 76);
  }
  
  // Add summary section
  doc.setFontSize(14);
  doc.setTextColor(primaryColor);
  doc.text('Summary', 20, 88);
  
  doc.setFontSize(10);
  doc.setTextColor(80);
  const splitSummary = doc.splitTextToSize(auditResult.summary, 170);
  doc.text(splitSummary, 20, 96);
  
  // Calculate the y position after summary text
  let yPos = 96 + splitSummary.length * 5;
  
  // Add strengths section
  doc.setFontSize(14);
  doc.setTextColor(primaryColor);
  doc.text('Key Strengths', 20, yPos + 10);
  
  // Use autoTable for strengths
  yPos += 15;
  autoTable(doc, {
    startY: yPos,
    head: [['Strengths']],
    body: auditResult.strengths.map(strength => [strength]),
    headStyles: { fillColor: [33, 20, 95], textColor: 255 },
    theme: 'striped',
    margin: { left: 20, right: 20 },
  });
  
  // Get the last y position after the strengths table
  yPos = (doc as any).lastAutoTable.finalY + 10;
  
  // Check if we need a new page
  if (yPos > 250) {
    doc.addPage();
    yPos = 20;
  }
  
  // Add weaknesses section
  doc.setFontSize(14);
  doc.setTextColor(primaryColor);
  doc.text('Areas for Improvement', 20, yPos);
  
  // Use autoTable for weaknesses
  yPos += 5;
  autoTable(doc, {
    startY: yPos,
    head: [['Areas for Improvement']],
    body: auditResult.weaknesses.map(weakness => [weakness]),
    headStyles: { fillColor: [200, 60, 60], textColor: 255 },
    theme: 'striped',
    margin: { left: 20, right: 20 },
  });
  
  // Get the last y position after the weaknesses table
  yPos = (doc as any).lastAutoTable.finalY + 10;
  
  // Check if we need a new page
  if (yPos > 240) {
    doc.addPage();
    yPos = 20;
  }
  
  // Add actionable steps section
  doc.setFontSize(14);
  doc.setTextColor(primaryColor);
  doc.text('Recommended Next Steps', 20, yPos);
  
  // Use autoTable for actionable steps with numbering
  yPos += 5;
  autoTable(doc, {
    startY: yPos,
    head: [['#', 'Action Item']],
    body: auditResult.actionableSteps.map((step, index) => [index + 1, step]),
    headStyles: { fillColor: [121, 80, 242], textColor: 255 },
    theme: 'striped',
    margin: { left: 20, right: 20 },
    columnStyles: {
      0: { cellWidth: 10 },
      1: { cellWidth: 160 },
    },
  });
  
  // Get the last y position after the actionable steps table
  yPos = (doc as any).lastAutoTable.finalY + 10;
  
  // Check if we need a new page
  if (yPos > 240) {
    doc.addPage();
    yPos = 20;
  }
  
  // Add tailored improvements section
  doc.setFontSize(14);
  doc.setTextColor(primaryColor);
  doc.text('Tailored Improvements', 20, yPos);
  
  // Use autoTable for improvements
  yPos += 5;
  autoTable(doc, {
    startY: yPos,
    head: [['Tailored Improvement Suggestions']],
    body: auditResult.improvements.map(improvement => [improvement]),
    headStyles: { fillColor: [33, 20, 95], textColor: 255 },
    theme: 'striped',
    margin: { left: 20, right: 20 },
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150);
    doc.text(
      'Generated by Website Brand Audit Tool',
      105,
      285,
      { align: 'center' }
    );
    doc.text(`Page ${i} of ${pageCount}`, 190, 285, { align: 'right' });
  }
  
  // Return the PDF as a blob
  return doc.output('blob');
};

// Optional: Function to send PDF report via email
export const sendPdfByEmail = async (
  pdf: Blob,
  email: string,
  name: string,
  website: string
): Promise<boolean> => {
  try {
    // Convert PDF blob to Base64
    const reader = new FileReader();
    const pdfBase64 = await new Promise<string>((resolve) => {
      reader.onload = () => resolve(reader.result as string);
      reader.readAsDataURL(pdf);
    });
    
    // Make API call to send email (implementation would depend on your email provider)
    const response = await fetch('/api/pdf/email', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email,
        name,
        website,
        pdfBase64,
      }),
    });
    
    const result = await response.json();
    return result.success;
  } catch (error) {
    console.error('Error sending PDF by email:', error);
    return false;
  }
}; 